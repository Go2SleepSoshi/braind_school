<?php

#1 err -> 1 err
#1 warn -> 2 warns
#2 warn -> 1 err
#2 errs -> fin

#функция вычисляет количество коммитов, на вход подается количество ошибок и количество ворнингов
function comm_calc($err, $warn)
{
	$commits = 0; #счётчик коммитов

	#прверка на возможность решения: нет решений только в том случае, если нет ворнингов, а число ошибок нечетное
	if ($warn == 0 and $err % 2 != 0)
	{
		return -1;
	} #далее обрабатывается частный случай, когда количество ворнингов равно нулю
	elseif ($warn == 0 and $err % 2 == 0)
	{
		return $err / 2;
	}

	#в цикле проверяется разрешимость ситуации, если ситуация не разрешима, увеличиваем количество ворнингов и добавляем коммит по правилу
	while (fmod(($warn / 2 + $err), 2) != 0)
	{
		$commits++;
		$warn++;
	}

	#складываем имеющиеся коммиты с коммитами для удаления ошибок и коммитами для удаления ворнингов
	$commits = $commits + ($warn / 2 + $err) / 2 + $warn / 2;
	return $commits;

}


#функция для проверки входной последовательности на соответствие условию
function comm_check($commstr)
{
	$pattern = "/[\d]+[\s][\d]+/";

	if (preg_match($pattern, $commstr) == 1)
	{
		return true;
	}
	else
	{
		return false;
	}
}


#на всякий случай проверяем соответствует ли входная последовтельность условию
if (comm_check($_POST['errors'])){
	#разбиваем полученную строку по пробелам
	$array_got = explode(" ", $_POST['errors']);
	#для наглядности присваеваем переменным с соотвествующими названиями ошибки и ворнинги
	$errs_got = $array_got[0];
	$warns_got = $array_got[1];
	#выводим результат работы функции
	echo comm_calc($errs_got, $warns_got);
} #в случае несоответствия выводим ошибку
else
{
	echo "Неверные входные данные";
}
?>